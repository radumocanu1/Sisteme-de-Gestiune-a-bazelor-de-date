select * from user_objects
where object_type in ('procedure');

-- Exercise 1

create table info_rm 
( utilizator varchar2(50),
  data date,
  comanda varchar2(50),
  nr_linii int,
  eroare varchar2(50)
);
drop table info_rm;

--Exercise 2

--function from exercise 2
CREATE OR REPLACE FUNCTION f2_rm 
    (v_nume employees.last_name%TYPE DEFAULT 'LastName') 
RETURN NUMBER IS
      salariu employees.salary%type;
      utilizator varchar2(50);
      data_curenta date;
      numar_linii int;
    BEGIN
      select count (salary) into numar_linii from employees where last_name = v_nume ;
      select CURRENT_DATE into data_curenta from DUAL;
      select user into utilizator from DUAL;
      if numar_linii = 1 then
        insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'f2_rm', numar_linii, 'functie executata cu succes');
      end if ;
      SELECT salary INTO salariu
      FROM   employees
      WHERE  last_name = v_nume;
      RETURN salariu;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'f2_rm', numar_linii, 'nu a fost gasit niciun utilizator cu acest nume');
        return salariu;
      WHEN TOO_MANY_ROWS THEN insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'f2_rm', numar_linii, 'exista mai multi utilizatori cu acest nume');
        return salariu;
      WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
    
END f2_rm;

begin
    DBMS_OUTPUT.put_line('Salariul este' || f2_rm('Kochhar'));
end;

--procedure from exercise 4

CREATE OR REPLACE PROCEDURE p4_rm
   (v_nume employees.last_name%TYPE)
   IS
     salariu employees.salary%TYPE;
      utilizator varchar2(50);
      data_curenta date;
      numar_linii int;
   BEGIN
     select count (salary) into numar_linii from employees where last_name = v_nume ;
      select CURRENT_DATE into data_curenta from DUAL;
      select user into utilizator from DUAL;
      if numar_linii = 1 then
        insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'f2_rm', numar_linii, 'functie executata cu succes');
      end if ;
     SELECT salary INTO salariu 
     FROM   employees
     WHERE  last_name = v_nume;
     DBMS_OUTPUT.PUT_LINE('Salariul este '|| salariu);
     
   EXCEPTION
     WHEN NO_DATA_FOUND THEN insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'f2_rm', numar_linii, 'nu a fost gasit niciun utilizator cu acest nume');
      WHEN TOO_MANY_ROWS THEN insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'f2_rm', numar_linii, 'exista mai multi utilizatori cu acest nume');
      WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
       
END p4_rm;

begin
     p4_rm('King');
end;

select * from info_rm;

select * from employees;

-- Exercise 3
create or replace function ex3_rm
    (nume_oras locations.city%TYPE DEFAULT '')
    return number is
    utilizator varchar2(50);
    data_curenta date;
    numar int;
    numar_linii int;
    id_locatie int;
    BEGIN
      select CURRENT_DATE into data_curenta from DUAL;
      select user into utilizator from DUAL;
     select location_id into id_locatie from locations where city = nume_oras;
     if nume_oras is NULL  then
     insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'ex3_rm', 0, 'Functia nu are parametru/ acesta este null!');
     return 0;
      end if ;
      select count(*) into numar_linii FROM employees e JOIN departments d ON (e.department_id = d.department_id)
        JOIN locations l ON (l.location_id = d.location_id) and l.city = nume_oras;
     if numar_linii = 0 then 
      insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'ex3_rm', 0, 'In orasul dat nu lucreaza niciun angajat');
     return 0;
     end if;
     SELECT COUNT(*) into numar
        FROM employees e JOIN departments d ON (e.department_id = d.department_id)
        JOIN locations l ON (l.location_id = d.location_id)
        WHERE (SELECT COUNT(*)
               FROM job_history
               WHERE employee_id = e.employee_id) >= 2 and l.city = 'Seattle';
         insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'ex3_rm', numar, 'Functie executata cu succes');
        return numar;
    exception
        WHEN NO_DATA_FOUND THEN
        insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'ex3_rm', 0, 'Orasul nu exista in baza de date');
        return 0;
end ex3_rm;

begin 
dbms_output.put_line('Numarul angajati ' || ex3_rm('abc'));
end;
               
select * from locations;

select * from info_rm;

-- Exercitiul 4 

create or replace procedure ex4_rm (my_id employees.employee_id%TYPE DEFAULT 0)
  IS
    numar_linii int;
     utilizator varchar2(50);
    data_curenta date;
  BEGIN
     select CURRENT_DATE into data_curenta from DUAL;
      select user into utilizator from DUAL;
     update employees set salary = salary + salary * 0.10 where manager_id = my_id;
     numar_linii := SQL%ROWCOUNT;
     if numar_linii = 0 then
     insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'ex4_rm', numar_linii, 'Nu exista manager cu id-ul specificat');
     else
     insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'ex4_rm', numar_linii, 'Procedura executata cu succes');
     end if;
    exception
        WHEN NO_DATA_FOUND THEN
        insert into info_rm (utilizator, data, comanda, nr_linii, eroare) values(utilizator, data_curenta, 'ex4_rm', 0, 'Nu exista niciun manager cu codul dat');
        
  END;
  
  begin
   ex4_rm(100);
  end;
    
delete from info_rm;  
select * from info_rm;
select * from employees;

  --Exercise 5
  
  select * from departments;
  select * from employees;
  select * from departments d join employees e on d.department_id = e.department_id;
  
  
create or replace procedure ex5_rm
    is 
      numar_linii int;
      nume_departament varchar2(50);
      numar_joburi int;
      nume_zi varchar2(10);
      index_angajat int;
  begin
      select count(*) into numar_joburi from departments;
      
      for joburi in (select * from departments) loop
      nume_departament := joburi.department_name;
      DBMS_OUTPUT.PUT_LINE(nume_departament || ':');
      select count (*) into numar_linii from employees e where e.department_id = joburi.department_id;
      if numar_linii = 0 then
          DBMS_OUTPUT.PUT_LINE('Acest departament nu are niciun angajat');
          CONTINUE;
      end if;
      select zi into nume_zi 
      from (select TO_CHAR (hire_date, 'DAY') zi, count (*)
            from employees e where e.department_id = joburi.department_id 
            group by TO_CHAR (hire_date, 'DAY') order by count(*) desc)
            where rownum = 1;
      DBMS_OUTPUT.PUT_LINE('Ziua in care au fost angajate cele mai multe persoane este: '|| nume_zi);
      index_angajat := 0;
      for angajat in (select * from employees e where e.department_id = joburi.department_id and TO_CHAR(e.hire_date, 'DAY') = nume_zi) loop
         index_angajat := index_angajat + 1;
         DBMS_OUTPUT.PUT_LINE(TO_CHAR(index_angajat)||'. '||angajat.first_name || ', salary:' || angajat.salary);
      end loop;
      
      end loop;
    
     
  end ex5_rm;

  SELECT TO_CHAR(DATE '2037-10-08', 'DAY')
FROM DUAL;
  begin
  ex5_rm();
  end;

  -- Exercise 6
  
  create or replace procedure ex6_rm
    is 
      data_anterioara date;
      numar_linii int;
      nume_departament varchar2(50);
      numar_joburi int;
      nume_zi varchar2(10);
      index_angajat int;
  begin
      select count(*) into numar_joburi from departments;
      
      for joburi in (select * from departments) loop
      nume_departament := joburi.department_name;
      DBMS_OUTPUT.PUT_LINE(nume_departament || ':');
      select count (*) into numar_linii from employees e where e.department_id = joburi.department_id;
      if numar_linii = 0 then
          DBMS_OUTPUT.PUT_LINE('Acest departament nu are niciun angajat');
          CONTINUE;
      end if;
      select zi into nume_zi 
      from (select TO_CHAR (hire_date, 'DAY') zi, count (*)
            from employees e where e.department_id = joburi.department_id 
            group by TO_CHAR (hire_date, 'DAY') order by count(*) desc)
            where rownum = 1;
      DBMS_OUTPUT.PUT_LINE('Ziua in care au fost angajate cele mai multe persoane este: '|| nume_zi);
      index_angajat := 0;
      data_anterioara := to_date('01/01/0001', 'dd/mm/yyyy');
      for angajat in (select * from employees e where e.department_id = joburi.department_id and TO_CHAR(e.hire_date, 'DAY') = nume_zi order by e.hire_date) loop
         index_angajat := index_angajat + 1;
         if data_anterioara = angajat.hire_date then
         index_angajat := index_angajat - 1;
         end if;
         DBMS_OUTPUT.PUT_LINE(TO_CHAR(index_angajat)||'. '||angajat.first_name || ', salary:' || angajat.salary || ', hired on date: ' || angajat.hire_date);
         data_anterioara := angajat.hire_date;
      end loop;
      
      end loop;
    
     
  end ex6_rm;

  SELECT TO_CHAR(DATE '2037-10-08', 'DAY')
FROM DUAL;
  begin
  ex6_rm();
  end;
  
  select * from employees;